Given cs (nint and nuint):
  nint foo = 42;
  nuint foo = 42;

Execute:
  AssertEqual 'csType', SyntaxAt(1, 1)
  AssertEqual 'csType', SyntaxAt(2, 1)

Given cs (function pointer):
  delegate* managed<int, int> foobar;
  delegate* unmanaged[Cdecl]<int, int> foobar;

Execute:
  AssertEqual 'csType',            SyntaxOf('delegate')
  AssertEqual 'csOpSymbols',       SyntaxOf('\*')
  AssertEqual 'csManagedModifier', SyntaxOf('managed')
  AssertEqual 'csType',            SyntaxAt(2, 1)
  AssertEqual 'csType',            SyntaxOf('delegate', 2)
  AssertEqual 'csOpSymbols',       SyntaxOf('\*')
  AssertEqual 'csManagedModifier', SyntaxOf('unmanaged')

Given cs (function pointer with whitespace before asterisk):
  delegate * managed<int, int> foobar;

Execute:
  AssertEqual 'csType',            SyntaxOf('delegate')
  AssertEqual 'csOpSymbols',       SyntaxOf('\*')
  AssertEqual 'csManagedModifier', SyntaxOf('\<managed')

Given cs (class type declaration):
  class Foo<T, U> : Bar<T, U> {}

Execute:
  AssertEqual 'csStorage',         SyntaxOf('class')
  AssertEqual 'csClassType',       SyntaxOf('Foo')
  AssertEqual 'csClassType',       SyntaxOf('T', 1)

Given cs (interface type declaration):
  interface Foo<T, U> : Bar<T, U> {}

Execute:
  AssertEqual 'csStorage',         SyntaxOf('interface')
  AssertEqual 'csInterfaceType',   SyntaxOf('Foo')
  AssertEqual 'csInterfaceType',   SyntaxOf('T', 1)

Given cs (struct type declaration):
  struct Foo<T, U> : Bar<T, U> {}

Execute:
  AssertEqual 'csStorage',         SyntaxOf('struct')
  AssertEqual 'csStructType',      SyntaxOf('Foo')
  AssertEqual 'csStructType',      SyntaxOf('T', 1)

Given cs (enum type declaration):
  enum Foo : int {}

Execute:
  AssertEqual 'csStorage',         SyntaxOf('enum')
  AssertEqual 'csEnumType',        SyntaxOf('Foo')

Given cs (delegate type declaration):
  delegate Foo<Bar<T>> Baz<T>();

Execute:
  AssertEqual 'csStorage',         SyntaxOf('delegate')
  AssertEqual 'csDelegateType',    SyntaxOf('Baz')
  AssertEqual 'csDelegateType',    SyntaxOf('T', 2)

