Given cs (booleans):
  true
  false

Execute:
  AssertEqual 'csBoolean',              SyntaxAt(1, 1)
  AssertEqual 'csBoolean',              SyntaxAt(2, 1)

Given cs (default literal):
  default

Execute:
  AssertEqual 'csDefault',                SyntaxAt(1, 1)

Given cs (default literal - ternary consequent):
  var foo = bar ? default : 42;

Execute:
  AssertEqual 'csDefault',                SyntaxOf('default')

Given cs (null):
  null

Execute:
  AssertEqual 'csNull',                   SyntaxAt(1, 1)

Given cs (chars):
  'a'
  '\''

Execute:
  AssertEqual 'csCharacter',              SyntaxAt(1, 1)
  AssertEqual 'csCharacter',              SyntaxAt(1, 2)
  AssertEqual 'csCharacter',              SyntaxAt(1, 3)
  AssertEqual 'csCharacter',              SyntaxAt(2, 1)
  AssertEqual 'csSpecialChar',            SyntaxAt(2, 2)
  AssertEqual 'csSpecialChar',            SyntaxAt(2, 3)
  AssertEqual 'csCharacter',              SyntaxAt(2, 4)

Given cs (decimal literals):
  1234
  1234l
  1234u
  1234ul
  1234lu

Execute:
  AssertEqual 'csInteger',                SyntaxAt(1, 1)
  AssertEqual 'csInteger',                SyntaxAt(2, 5)
  AssertEqual 'csInteger',                SyntaxAt(3, 5)
  AssertEqual 'csInteger',                SyntaxAt(4, 6)
  AssertEqual 'csInteger',                SyntaxAt(5, 6)

Given cs (hex literals):
  0xf
  0Xf
  0xfl
  0xfu
  0xful
  0xflu
  0xg

Execute:
  AssertEqual 'csInteger',                SyntaxAt(1, 3)
  AssertEqual 'csInteger',                SyntaxAt(2, 3)
  AssertEqual 'csInteger',                SyntaxAt(3, 4)
  AssertEqual 'csInteger',                SyntaxAt(4, 4)
  AssertEqual 'csInteger',                SyntaxAt(5, 5)
  AssertEqual 'csInteger',                SyntaxAt(6, 5)
  AssertNotEqual 'csInteger',             SyntaxAt(7, 3), 'Not a hex digit'

Given cs (binary literals):
  0b0
  0B0
  0b0l
  0b0u
  0b0ul
  0b0lu
  0b2

Execute:
  AssertEqual 'csInteger',                SyntaxAt(1, 3)
  AssertEqual 'csInteger',                SyntaxAt(2, 3)
  AssertEqual 'csInteger',                SyntaxAt(3, 4)
  AssertEqual 'csInteger',                SyntaxAt(4, 4)
  AssertEqual 'csInteger',                SyntaxAt(5, 5)
  AssertEqual 'csInteger',                SyntaxAt(6, 5)
  AssertNotEqual 'csInteger',             SyntaxAt(7, 3), 'Not a binary digit'

Given cs (floating point literals):
  1.5f
  1e10d
  123.456D
  123.456M

Execute:
  AssertEqual 'csReal',                   SyntaxAt(1, 4)
  AssertEqual 'csReal',                   SyntaxAt(2, 5)
  AssertEqual 'csReal',                   SyntaxAt(3, 8)
  AssertEqual 'csReal',                   SyntaxAt(4, 8)

Given cs (digit separators):
  123_456
  123__456
  0x_be_af
  0b_0011_0101
  123_456.242_3D

Execute:
  AssertEqual 'csInteger',                SyntaxAt(1, 4)
  AssertEqual 'csInteger',                SyntaxAt(2, 5)
  AssertEqual 'csInteger',                SyntaxAt(3, 3)
  AssertEqual 'csInteger',                SyntaxAt(4, 3)
  AssertEqual 'csReal',                   SyntaxAt(5, 4)
  AssertEqual 'csReal',                   SyntaxAt(5, 12)

Given cs (valid char literals):
  '\x1'
  '\x41'
  '\x041'
  '\x0041'
  '\u0041'
  '\U00000041'

Execute:
  AssertEqual 'csUnicodeSpecifier',       SyntaxAt(1, 2)
  AssertEqual 'csUnicodeSpecifier',       SyntaxAt(1, 3)
  AssertEqual 'csUnicodeNumber',          SyntaxAt(1, 4)
  AssertEqual 'csUnicodeSpecifier',       SyntaxAt(2, 2)
  AssertEqual 'csUnicodeSpecifier',       SyntaxAt(2, 3)
  AssertEqual 'csUnicodeNumber',          SyntaxAt(2, 4)
  AssertEqual 'csUnicodeSpecifier',       SyntaxAt(3, 2)
  AssertEqual 'csUnicodeSpecifier',       SyntaxAt(3, 3)
  AssertEqual 'csUnicodeNumber',          SyntaxAt(3, 4)
  AssertEqual 'csUnicodeSpecifier',       SyntaxAt(4, 2)
  AssertEqual 'csUnicodeSpecifier',       SyntaxAt(4, 3)
  AssertEqual 'csUnicodeNumber',          SyntaxAt(4, 4)
  AssertEqual 'csUnicodeSpecifier',       SyntaxAt(5, 2)
  AssertEqual 'csUnicodeSpecifier',       SyntaxAt(5, 3)
  AssertEqual 'csUnicodeNumber',          SyntaxAt(5, 4)
  AssertEqual 'csUnicodeSpecifier',       SyntaxAt(6, 2)
  AssertEqual 'csUnicodeSpecifier',       SyntaxAt(6, 3)
  AssertEqual 'csUnicodeNumber',          SyntaxAt(6, 4)
  AssertEqual 'csUnicodeNumber',          SyntaxAt(6, 11)

Given cs (invalid char literals):
  '\xaaaaa'
  '\uaaaaa'
  '\U00aaaaaaa'
  '\x'
  '\uaaa'
  '\U00aaaaa'
  '\xg'
  '\ugggg'
  '\Ugggggggg'

Execute:
  AssertEqual 'csSpecialCharError',       SyntaxAt(1, 8),  'More than 4 digits (\x)'
  AssertEqual 'csSpecialCharError',       SyntaxAt(2, 8),  'More than 4 digits (\u)'
  AssertEqual 'csSpecialCharError',       SyntaxAt(3, 12), 'More than 8 digits (\U)'
  AssertEqual 'csSpecialCharError',       SyntaxAt(4, 2),  'Less than 1 digit (\x)'
  AssertEqual 'csSpecialCharError',       SyntaxAt(5, 2),  'Less than 4 digits (\u)'
  AssertEqual 'csSpecialCharError',       SyntaxAt(6, 2),  'Less than 8 digits (\u)'
  AssertEqual 'csSpecialCharError',       SyntaxAt(7, 4),  'Non-hex digit (\x)'
  AssertEqual 'csSpecialCharError',       SyntaxAt(8, 4),  'Non-hex digit (\u)'
  AssertEqual 'csSpecialCharError',       SyntaxAt(9, 4),  'Non-hex digit (\U)'

