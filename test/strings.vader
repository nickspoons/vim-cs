Given cs (a simple string):
  "a"

Execute:
  AssertEqual 'csQuote',                  SyntaxAt(1)
  AssertEqual 'csString',                 SyntaxAt(2)
  AssertEqual 'csQuote',                  SyntaxAt(3)

Given cs (a simple string containing a single quote):
  "a'b"

Execute:
  AssertEqual 'csString',                 SyntaxAt(3)

Given cs (a string containing an escaped double quote):
  "a\"b"

Execute:
  AssertEqual 'csString',                 SyntaxAt(2)
  AssertEqual 'csSpecialChar',            SyntaxAt(3)
  AssertEqual 'csSpecialChar',            SyntaxAt(4)
  AssertEqual 'csString',                 SyntaxAt(5)

Given cs (a simple string containing {}):
  "a{b}c"

Execute:
  AssertEqual 'csString',                 SyntaxAt(2)
  AssertEqual 'csString',                 SyntaxAt(3), 'Do not highlight {} in simple string'
  AssertEqual 'csString',                 SyntaxAt(4)
  AssertEqual 'csString',                 SyntaxAt(5), 'Do not highlight {} in simple string'
  AssertEqual 'csString',                 SyntaxAt(6)

Given cs (a multiline string (illegal)):
  "a
   b"

Execute:
  AssertEqual    'csString',              SyntaxAt(1, 2)
  AssertNotEqual 'csString',              SyntaxAt(2, 2)

Given cs (a simple verbatim (@) string):
  @"a"

Execute:
  AssertEqual 'csQuote',                  SyntaxAt(1)
  AssertEqual 'csQuote',                  SyntaxAt(2)
  AssertEqual 'csVerbatimString',         SyntaxAt(3)
  AssertEqual 'csQuote',                  SyntaxAt(4)

Given cs (a verbatim string containing ""):
  @"""a""b"""

Execute:
  AssertEqual 'csQuote',                  SyntaxAt(1)
  AssertEqual 'csQuote',                  SyntaxAt(2)
  AssertEqual 'csVerbatimQuote',          SyntaxAt(3), 'Highlight double quotes ("")'
  AssertEqual 'csVerbatimQuote',          SyntaxAt(4)
  AssertEqual 'csVerbatimString',         SyntaxAt(5)
  AssertEqual 'csVerbatimQuote',          SyntaxAt(6)
  AssertEqual 'csVerbatimQuote',          SyntaxAt(7)
  AssertEqual 'csVerbatimString',         SyntaxAt(8)
  AssertEqual 'csVerbatimQuote',          SyntaxAt(9)
  AssertEqual 'csVerbatimQuote',          SyntaxAt(10)
  AssertEqual 'csQuote',                  SyntaxAt(11)

Given cs (a verbatim string containing \"):
  @"a\"b

Execute:
  AssertEqual    'csQuote',               SyntaxAt(1)
  AssertEqual    'csQuote',               SyntaxAt(2)
  AssertEqual    'csVerbatimString',      SyntaxAt(3)
  AssertEqual    'csVerbatimString',      SyntaxAt(4), 'Do not highlight \-escaped quotes'
  AssertEqual    'csQuote',               SyntaxAt(5)
  AssertNotEqual 'csString',              SyntaxAt(6)
  AssertNotEqual 'csQuote',               SyntaxAt(6)
  AssertNotEqual 'csVerbatimString',      SyntaxAt(6)

Given cs (a multiline verbatim string):
  @"a
    b"

Execute:
  AssertEqual 'csVerbatimString',         SyntaxAt(1, 3)
  AssertEqual 'csVerbatimString',         SyntaxAt(2, 3)

Given cs (an interpolated string with no interpolation):
  $"a"

Execute:
  AssertEqual 'csQuote',                  SyntaxAt(1)
  AssertEqual 'csQuote',                  SyntaxAt(2)
  AssertEqual 'csInterpolatedString',     SyntaxAt(3)
  AssertEqual 'csQuote',                  SyntaxAt(4)

Given cs (a simple interpolated string):
  $"a:{'a'}, n:{5}"

Execute:
  AssertEqual 'csInterpolatedString',     SyntaxAt(4)
  AssertEqual 'csInterpolationDelimiter', SyntaxAt(5)
  AssertEqual 'csCharacter',              SyntaxAt(6)
  AssertEqual 'csCharacter',              SyntaxAt(7)
  AssertEqual 'csCharacter',              SyntaxAt(8)
  AssertEqual 'csInterpolationDelimiter', SyntaxAt(9)
  AssertEqual 'csInterpolationDelimiter', SyntaxAt(14)
  AssertEqual 'csInteger',                SyntaxAt(15)
  AssertEqual 'csInterpolationDelimiter', SyntaxAt(16)

Given cs (interpolated strings, containing strings):
  $"a:{"a\""} "
  $"b:{@"b"""} "
  $"c{$"c{1}"}\""

Execute:
  AssertEqual 'csQuote',                  SyntaxAt(1, 1)
  AssertEqual 'csQuote',                  SyntaxAt(1, 2)
  AssertEqual 'csInterpolatedString',     SyntaxAt(1, 3)
  AssertEqual 'csInterpolatedString',     SyntaxAt(1, 4)
  AssertEqual 'csInterpolationDelimiter', SyntaxAt(1, 5)
  AssertEqual 'csQuote',                  SyntaxAt(1, 6)
  AssertEqual 'csString',                 SyntaxAt(1, 7)
  AssertEqual 'csSpecialChar',            SyntaxAt(1, 8)
  AssertEqual 'csSpecialChar',            SyntaxAt(1, 9)
  AssertEqual 'csQuote',                  SyntaxAt(1, 10)
  AssertEqual 'csInterpolationDelimiter', SyntaxAt(1, 11)
  AssertEqual 'csInterpolatedString',     SyntaxAt(1, 12)
  AssertEqual 'csQuote',                  SyntaxAt(1, 13)
  AssertEqual 'csInterpolatedString',     SyntaxAt(2, 3)
  AssertEqual 'csInterpolatedString',     SyntaxAt(2, 4)
  AssertEqual 'csInterpolationDelimiter', SyntaxAt(2, 5)
  AssertEqual 'csQuote',                  SyntaxAt(2, 6)
  AssertEqual 'csQuote',                  SyntaxAt(2, 7)
  AssertEqual 'csVerbatimString',         SyntaxAt(2, 8)
  AssertEqual 'csVerbatimQuote',          SyntaxAt(2, 9)
  AssertEqual 'csVerbatimQuote',          SyntaxAt(2, 10)
  AssertEqual 'csQuote',                  SyntaxAt(2, 11)
  AssertEqual 'csInterpolationDelimiter', SyntaxAt(2, 12)
  AssertEqual 'csInterpolatedString',     SyntaxAt(2, 13)
  AssertEqual 'csQuote',                  SyntaxAt(2, 14)
  AssertEqual 'csInterpolatedString',     SyntaxAt(3, 3)
  AssertEqual 'csInterpolationDelimiter', SyntaxAt(3, 4)
  AssertEqual 'csQuote',                  SyntaxAt(3, 5)
  AssertEqual 'csQuote',                  SyntaxAt(3, 6)
  AssertEqual 'csInterpolatedString',     SyntaxAt(3, 7)
  AssertEqual 'csInterpolationDelimiter', SyntaxAt(3, 8)
  AssertEqual 'csInteger',                SyntaxAt(3, 9)
  AssertEqual 'csInterpolationDelimiter', SyntaxAt(3, 10)
  AssertEqual 'csQuote',                  SyntaxAt(3, 11)
  AssertEqual 'csInterpolationDelimiter', SyntaxAt(3, 12)
  AssertEqual 'csSpecialChar',            SyntaxAt(3, 13)
  AssertEqual 'csSpecialChar',            SyntaxAt(3, 14)
  AssertEqual 'csQuote',                  SyntaxAt(3, 15)

Given cs (an interpolated string, containing aligned strings):
  $"a:{"a",3} b:{"b",-5}"

Execute:
  AssertEqual 'csInterpolatedString',     SyntaxAt(4)
  AssertEqual 'csInterpolationDelimiter', SyntaxAt(5)
  AssertEqual 'csQuote',                  SyntaxAt(6)
  AssertEqual 'csString',                 SyntaxAt(7)
  AssertEqual 'csQuote',                  SyntaxAt(8)
  AssertEqual 'csInterpolationAlignDel',  SyntaxAt(9)
  AssertEqual 'csInteger',                SyntaxAt(10)
  AssertEqual 'csInterpolationDelimiter', SyntaxAt(11)
  AssertEqual 'csInterpolatedString',     SyntaxAt(12)
  AssertEqual 'csInterpolatedString',     SyntaxAt(13)
  AssertEqual 'csInterpolatedString',     SyntaxAt(14)
  AssertEqual 'csInterpolationDelimiter', SyntaxAt(15)
  AssertEqual 'csQuote',                  SyntaxAt(16)
  AssertEqual 'csString',                 SyntaxAt(17)
  AssertEqual 'csQuote',                  SyntaxAt(18)
  AssertEqual 'csInterpolationAlignDel',  SyntaxAt(19)
  AssertEqual 'csOpSymbols',              SyntaxAt(20)
  AssertEqual 'csInteger',                SyntaxAt(21)
  AssertEqual 'csInterpolationDelimiter', SyntaxAt(22)
  AssertEqual 'csQuote',                  SyntaxAt(23)

Given cs (strings interpolated with formatted numbers):
  $"a:{5:0} b:{5:F}"

Execute:
  AssertEqual 'csInterpolatedString',     SyntaxAt(4)
  AssertEqual 'csInterpolationDelimiter', SyntaxAt(5)
  AssertEqual 'csInteger',                SyntaxAt(6)
  AssertEqual 'csInterpolationFormatDel', SyntaxAt(7)
  AssertEqual 'csInterpolationFormat',    SyntaxAt(8)
  AssertEqual 'csInterpolationDelimiter', SyntaxAt(9)
  AssertEqual 'csInterpolationDelimiter', SyntaxAt(13)
  AssertEqual 'csInteger',                SyntaxAt(14)
  AssertEqual 'csInterpolationFormatDel', SyntaxAt(15)
  AssertEqual 'csInterpolationFormat',    SyntaxAt(16)
  AssertEqual 'csInterpolationDelimiter', SyntaxAt(17)

Given cs (a string interpolated with an aligned, formatted integer):
  $"a:{ 5,-(true?-3:3):0,# }"

Execute:
  AssertEqual 'csInterpolatedString',     SyntaxAt(4)
  AssertEqual 'csInterpolationDelimiter', SyntaxAt(5)
  AssertEqual 'csInterpolation',          SyntaxAt(6)
  AssertEqual 'csInteger',                SyntaxAt(7)
  AssertEqual 'csInterpolationAlignDel',  SyntaxAt(8)
  AssertEqual 'csOpSymbols',              SyntaxAt(9)
  AssertEqual 'csParens',                 SyntaxAt(10)
  AssertEqual 'csBoolean',                SyntaxAt(11)
  AssertEqual 'csBoolean',                SyntaxAt(12)
  AssertEqual 'csBoolean',                SyntaxAt(13)
  AssertEqual 'csBoolean',                SyntaxAt(14)
  AssertEqual 'csLogicSymbols',           SyntaxAt(15)
  AssertEqual 'csOpSymbols',              SyntaxAt(16)
  AssertEqual 'csInteger',                SyntaxAt(17)
  AssertEqual 'csLogicSymbols',           SyntaxAt(18)
  AssertEqual 'csInteger',                SyntaxAt(19)
  AssertEqual 'csParens',                 SyntaxAt(20)
  AssertEqual 'csInterpolationFormatDel', SyntaxAt(21)
  AssertEqual 'csInterpolationFormat',    SyntaxAt(22)
  AssertEqual 'csInterpolationFormat',    SyntaxAt(23)
  AssertEqual 'csInterpolationFormat',    SyntaxAt(24)
  AssertEqual 'csInterpolationFormat',    SyntaxAt(25)
  AssertEqual 'csInterpolationDelimiter', SyntaxAt(26)

Given cs (an interpolated string containing escaped (doubled) {{ }}):
  $"{{{5}}} a:{{'ab'}} '{ab}'c"

Execute:
  AssertEqual 'csQuote',                  SyntaxAt(1)
  AssertEqual 'csQuote',                  SyntaxAt(2)
  AssertEqual 'csInterpolatedString',     SyntaxAt(3)
  AssertEqual 'csInterpolatedString',     SyntaxAt(4)
  AssertEqual 'csInterpolationDelimiter', SyntaxAt(5)
  AssertEqual 'csInteger',                SyntaxAt(6)
  AssertEqual 'csInterpolationDelimiter', SyntaxAt(7)
  AssertEqual 'csInterpolatedString',     SyntaxAt(8)
  AssertEqual 'csInterpolatedString',     SyntaxAt(9)
  AssertEqual 'csInterpolatedString',     SyntaxAt(10)
  AssertEqual 'csInterpolatedString',     SyntaxAt(11)
  AssertEqual 'csInterpolatedString',     SyntaxAt(12)
  AssertEqual 'csInterpolatedString',     SyntaxAt(13)
  AssertEqual 'csInterpolatedString',     SyntaxAt(14)
  AssertEqual 'csInterpolatedString',     SyntaxAt(15)
  AssertEqual 'csInterpolatedString',     SyntaxAt(16)
  AssertEqual 'csInterpolatedString',     SyntaxAt(17)
  AssertEqual 'csInterpolatedString',     SyntaxAt(18)
  AssertEqual 'csInterpolatedString',     SyntaxAt(19)
  AssertEqual 'csInterpolatedString',     SyntaxAt(20)
  AssertEqual 'csInterpolatedString',     SyntaxAt(21)
  AssertEqual 'csInterpolatedString',     SyntaxAt(22)
  AssertEqual 'csInterpolationDelimiter', SyntaxAt(23)
  AssertEqual 'csInterpolation',          SyntaxAt(24)
  AssertEqual 'csInterpolation',          SyntaxAt(25)
  AssertEqual 'csInterpolationDelimiter', SyntaxAt(26)
  AssertEqual 'csInterpolatedString',     SyntaxAt(27)
  AssertEqual 'csInterpolatedString',     SyntaxAt(28)

Given cs (a verbatim, interpolated string):
  $@"a:{'a'}""
    b"""

Execute:
  AssertEqual 'csQuote',                      SyntaxAt(1, 1)
  AssertEqual 'csQuote',                      SyntaxAt(1, 2)
  AssertEqual 'csQuote',                      SyntaxAt(1, 3)
  AssertEqual 'csInterVerbString',            SyntaxAt(1, 4)
  AssertEqual 'csInterVerbString',            SyntaxAt(1, 5)
  AssertEqual 'csInterpolationDelimiter',     SyntaxAt(1, 6)
  AssertEqual 'csCharacter',                  SyntaxAt(1, 7)
  AssertEqual 'csCharacter',                  SyntaxAt(1, 8)
  AssertEqual 'csCharacter',                  SyntaxAt(1, 9)
  AssertEqual 'csInterpolationDelimiter',     SyntaxAt(1, 10)
  AssertEqual 'csVerbatimQuote',              SyntaxAt(1, 11)
  AssertEqual 'csVerbatimQuote',              SyntaxAt(1, 12)
  AssertEqual 'csInterVerbString',            SyntaxAt(2, 1)
  AssertEqual 'csInterVerbString',            SyntaxAt(2, 2)
  AssertEqual 'csInterVerbString',            SyntaxAt(2, 3)
  AssertEqual 'csVerbatimQuote',              SyntaxAt(2, 4)
  AssertEqual 'csVerbatimQuote',              SyntaxAt(2, 5)
  AssertEqual 'csQuote',                      SyntaxAt(2, 6)

Given cs (a verbatim, interpolated string containing braces):
  $@"a:{new{'a'}}a"

Execute:
  AssertEqual 'csInterpolationDelimiter',     SyntaxAt(1, 6)
  AssertEqual 'csNew',                        SyntaxAt(1, 7)
  AssertEqual 'csNew',                        SyntaxAt(1, 8)
  AssertEqual 'csNew',                        SyntaxAt(1, 9)
  AssertEqual 'csParens',                     SyntaxAt(1, 10)
  AssertEqual 'csCharacter',                  SyntaxAt(1, 11)
  AssertEqual 'csCharacter',                  SyntaxAt(1, 12)
  AssertEqual 'csCharacter',                  SyntaxAt(1, 13)
  AssertEqual 'csParens',                     SyntaxAt(1, 14)
  AssertEqual 'csInterpolationDelimiter',     SyntaxAt(1, 15)
  AssertEqual 'csInterVerbString',            SyntaxAt(1, 16)
  AssertEqual 'csQuote',                      SyntaxAt(1, 17)

Given cs (a verbatim, interpolated string containing brackets):
  $@"a:{('a')}a"

Execute:
  AssertEqual 'csInterpolationDelimiter',     SyntaxAt(1, 6)
  AssertEqual 'csParens',                     SyntaxAt(1, 7)
  AssertEqual 'csCharacter',                  SyntaxAt(1, 8)
  AssertEqual 'csCharacter',                  SyntaxAt(1, 9)
  AssertEqual 'csCharacter',                  SyntaxAt(1, 10)
  AssertEqual 'csParens',                     SyntaxAt(1, 11)
  AssertEqual 'csInterpolationDelimiter',     SyntaxAt(1, 12)
  AssertEqual 'csInterVerbString',            SyntaxAt(1, 13)
  AssertEqual 'csQuote',                      SyntaxAt(1, 14)

Given cs (a nested verbatim, interpolated string):
  $@"a:{$@"b{'c'}"}""
    c"""

Execute:
  AssertEqual 'csQuote',                      SyntaxAt(1, 1)
  AssertEqual 'csQuote',                      SyntaxAt(1, 2)
  AssertEqual 'csQuote',                      SyntaxAt(1, 3)
  AssertEqual 'csInterVerbString',            SyntaxAt(1, 4)
  AssertEqual 'csInterVerbString',            SyntaxAt(1, 5)
  AssertEqual 'csInterpolationDelimiter',     SyntaxAt(1, 6)
  AssertEqual 'csQuote',                      SyntaxAt(1, 7)
  AssertEqual 'csQuote',                      SyntaxAt(1, 8)
  AssertEqual 'csQuote',                      SyntaxAt(1, 9)
  AssertEqual 'csInterVerbString',            SyntaxAt(1, 10)
  AssertEqual 'csInterpolationDelimiter',     SyntaxAt(1, 11)
  AssertEqual 'csCharacter',                  SyntaxAt(1, 12)
  AssertEqual 'csCharacter',                  SyntaxAt(1, 13)
  AssertEqual 'csCharacter',                  SyntaxAt(1, 14)
  AssertEqual 'csInterpolationDelimiter',     SyntaxAt(1, 15)
  AssertEqual 'csQuote',                      SyntaxAt(1, 16)
  AssertEqual 'csInterpolationDelimiter',     SyntaxAt(1, 17)
  AssertEqual 'csVerbatimQuote',              SyntaxAt(1, 18)
  AssertEqual 'csVerbatimQuote',              SyntaxAt(1, 19)
  AssertEqual 'csInterVerbString',            SyntaxAt(2, 1)
  AssertEqual 'csInterVerbString',            SyntaxAt(2, 2)
  AssertEqual 'csInterVerbString',            SyntaxAt(2, 3)
  AssertEqual 'csVerbatimQuote',              SyntaxAt(2, 4)
  AssertEqual 'csVerbatimQuote',              SyntaxAt(2, 5)
  AssertEqual 'csQuote',                      SyntaxAt(2, 6)

Given cs (a verbatim, interpolated string with alternate open delimiter (@$ instead of $@)):
  @$"..."

Execute:
  AssertEqual 'csQuote',                  SyntaxAt(1)
  AssertEqual 'csQuote',                  SyntaxAt(2)
  AssertEqual 'csQuote',                  SyntaxAt(3)
  AssertEqual 'csInterVerbString',        SyntaxAt(4)

Given cs (UTF8 string literals):
  "..."u8
  $"..."u8
  @"..."u8
  $@"..."u8

Execute:
  AssertEqual 'csQuote',             SyntaxOf("u8", 1)
  AssertEqual 'csQuote',             SyntaxOf("u8", 2)
  AssertEqual 'csQuote',             SyntaxOf("u8", 3)
  AssertEqual 'csQuote',             SyntaxOf("u8", 4)

Given cs (a single line raw string):
  """a"""

Execute:
  AssertEqual 'csQuote',                  SyntaxOf('"""', 1)
  AssertEqual 'csQuote',                  SyntaxOf('"""', 2)
  AssertEqual 'csRawString3',             SyntaxOf('a')

Given cs (a multi-line raw string):
  """
  a
  """

Execute:
  AssertEqual 'csQuote',                  SyntaxOf('"""', 1)
  AssertEqual 'csQuote',                  SyntaxOf('"""', 2)
  AssertEqual 'csRawString3',             SyntaxOf('a')

Given cs (an invalid multi-line raw string start delimiter):
  """ non-whitespace
  42
  """

Execute:
  AssertEqual 'csString',                 SyntaxOf('non-whitespace')
  AssertEqual 'csInteger',                SyntaxOf('42')

Given cs (an invalid multi-line raw string end delimiter):
  """
  a
  non-whitespace """

Execute:
  AssertEqual 'csQuote',                  SyntaxOf('"""', 1)
  AssertEqual 'csRawString3',             SyntaxOf('a')
  AssertEqual 'csRawStringError3',        SyntaxOf('non-whitespace """')

Given cs (an interpolated raw string - 1 dollar):
  $"""
  a
  {42}
  {{42}}
  {{{42}}}
  b
  """

Execute:
  AssertEqual 'csQuote',                        SyntaxOf('$"""')
  AssertEqual 'csInterpolatedRawString1',       SyntaxOf('a')
  AssertEqual 'csInterpolationDelimiter',       SyntaxOf('{')
  AssertEqual 'csInteger',                      SyntaxOf('42')
  AssertEqual 'csInterpolationDelimiter',       SyntaxOf('}')
  AssertEqual 'csInterpolationDelimiterError1', SyntaxOf('{{')
  AssertEqual 'csInterpolatedRawString1',       SyntaxOf('42', 2)
  AssertEqual 'csInterpolationDelimiterError1', SyntaxOf('}}')
  AssertEqual 'csInterpolationDelimiterError1', SyntaxOf('{{{')
  AssertEqual 'csInterpolatedRawString1',       SyntaxOf('42', 3)
  AssertEqual 'csInterpolationDelimiterError1', SyntaxOf('}}}')
  AssertEqual 'csInterpolatedRawString1',       SyntaxOf('b')
  AssertEqual 'csQuote',                        SyntaxOf('"""', 2)

Given cs (an interpolated raw string - 2 dollar):
  $$"""
  a
  {42}
  {{42}}
  {{{42}}}
  {{{{42}}}}
  {{{{{42}}}}}
  b
  """

Execute:
  AssertEqual 'csQuote',                        SyntaxOf('$"""')
  AssertEqual 'csInterpolatedRawString2',       SyntaxOf('a')
  AssertEqual 'csInterpolatedRawString2',       SyntaxOf('{')
  AssertEqual 'csInterpolatedRawString2',       SyntaxOf('42')
  AssertEqual 'csInterpolatedRawString2',       SyntaxOf('}')
  AssertEqual 'csInterpolationDelimiter',       SyntaxOf('{{')
  AssertEqual 'csInteger',                      SyntaxOf('42', 2)
  AssertEqual 'csInterpolationDelimiter',       SyntaxOf('}}')
  AssertEqual 'csInterpolatedRawString2',       SyntaxOf('{\ze{{')
  AssertEqual 'csInterpolationDelimiter',       SyntaxOf('{\zs{{')
  AssertEqual 'csInteger',                      SyntaxOf('42', 3)
  AssertEqual 'csInterpolationDelimiter',       SyntaxOf('}}\ze}')
  AssertEqual 'csInterpolatedRawString2',       SyntaxOf('}}\zs}')
  AssertEqual 'csInterpolationDelimiterError2', SyntaxOf('{{{{')
  AssertEqual 'csInterpolatedRawString2',       SyntaxOf('42', 4)
  AssertEqual 'csInterpolationDelimiterError2', SyntaxOf('}}}}')
  AssertEqual 'csInterpolationDelimiterError2', SyntaxOf('{{{{{')
  AssertEqual 'csInterpolatedRawString2',       SyntaxOf('42', 5)
  AssertEqual 'csInterpolationDelimiterError2', SyntaxOf('}}}}}')
  AssertEqual 'csInterpolatedRawString2',       SyntaxOf('b')
  AssertEqual 'csQuote',                        SyntaxOf('"""', 2)

